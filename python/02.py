#!/usr/bin/python
# -*- coding: utf-8 -*-
# Exercise number 02 from https://projecteuler.net/archives
# Each new term in the Fibonacci sequence is generated by adding the previous
# two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

__author__ = 'SLP'
from time import time
class Fibonacci():
    def __init__(self,limitup):
        """
        Init method
        :param limitup: Upper limit to calculate de Fibonacci sequence

        """
        self.__limitup = limitup
        self.__suma = 0
        self.__startTime = time()

    def calculateSequence(self, limitup=None):
        if limitup is None:
            limitup = self.__limitup
        f1, f2 = 0 , 1
        self.__sequence = [0,1]
        while (f2 < limitup):
            f1,f2 = f2, f1+f2
            self.__sequence.append(f2)

    def calculateEven(self):
        for number in self.__sequence:
            if not number%2:
                self.__suma += number

    def getSequence(self):
        return self.__sequence

    def getSumma(self):
        return self.__suma

    def main(self):
        self.calculateSequence()
        self.calculateEven()
        print(self.getSumma())
        print('Elapsed time: {}'.format(time()-self.__startTime))

if __name__ == '__main__':
    exc2 = Fibonacci(4000000)
    exc2.main()
